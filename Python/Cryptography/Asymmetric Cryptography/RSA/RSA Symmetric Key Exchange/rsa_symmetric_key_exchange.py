# RSA Symmetric Key Exchange
# Gen a secret key and transmit it securely using RSA as Key Encapsulating Mechanism (KEM)

""" Steps:
1: Alice generates a secret, random symmetric key to be shared
2: Bob generates an asymmetric key pair and makes his public key available
3: Alice uses Bob's public key to encrypt the symmetric key, encapsulating it in ciphertext and broadcasting it to Bob.
4: Bob receives ciphertext and decrypts using his private key - now has the symmetric key gen by Alice """

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes

# 1: Alice gens a random symmetric key
symmetric_key = Fernet.generate_key()
print(f"\nSymmetric key generated by Alice: {symmetric_key}")

# 2: Bob gens a 2048-bit RSA key-pair
bob_private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
bob_public_key = bob_private_key.public_key()
print(f"\nPublic key broadcast by Bob: {bob_public_key}")
print(f"Public numbers in Bob's public key: {bob_public_key.public_numbers()}")

# 3: Alice uses Bob's public key to encrypt the symmetric key, broadcasts it to Bob
ciphertext = bob_public_key.encrypt(
    symmetric_key,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)
print("\nCiphertext:", ciphertext)

# 4: Bob decrypts ciphertext to access the symmetric key
decrypted_symmetric_key = bob_private_key.decrypt(
    ciphertext,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

print("\nDecrypted key:", decrypted_symmetric_key)
assert decrypted_symmetric_key == symmetric_key
